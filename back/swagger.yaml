openapi: 3.0.3
info:
  title: OnineWallet
  description: Money transfer service between users, each user has his own wallet and the ability to transfer or receive funds from another user
  contact:
    email: apiteam@swagger.io
  version: 1.0.0
servers:
    - url: https://online-wallet.swagger.io/api/v3
tags:
  - name: wallet
    description: Operations with user's wallet
  - name: transfer
    description: Operations with transactions
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        default:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
    delete:
      tags:
        - user
      summary: Delete logged in user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        '200': 
          description: Successful operation
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    access_token:
                      type: string
        '400':
          description: Invalid email/password supplied
        '405':
          description: Validation exception
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
  /user/{user_id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByName
      parameters:
        - name: user_id
          in: path
          description: 'Id of user. '
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'          
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - bearerAuth: []
  /wallet:
    post:
      tags:
        - wallet
      summary: Create wallet
      description: This can only be done by the logged in user.
      operationId: createWallet
      requestBody:
        description: Create the wallet for user
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  example: 3
                funds:
                  type: integer
                  format: int64
                  example: 1000
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'          
        '405':
          description: Invalid input
      security:
        - bearerAuth: []
    get:
      tags:
      - wallet
      summary: Lists of wallets 
      description: This can only be done by the logged in user.
      operationId: WalletsList
      responses:
        '200':
          description: List of wallets of the authorized user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wallet'
      security:
        - bearerAuth: []
  /wallet/{wallet_id}:
    get:
      tags:
      - wallet
      summary: Get wallet of the authorized user by id
      operationId: getWalletById
      parameters:
      - name: wallet_id
        in: path
        description: 'Id of the wallet'
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
                
        '400':
          description: Invalid ID supplied
        '404':
          description: Wallet not found
      security:
        - bearerAuth: []
    put:
      tags:
      - wallet
      summary: Update funds in the wallet
      description: This can only be done by the logged in user.
      operationId: updateFundsWallet
      parameters:
      - name: wallet_id
        in: path
        description: 'Id of a target wallet'
        required: true
        schema:
          type: integer
      requestBody:
        description: Amout of money
        content:
          application/json:
            schema:
              type: object
              properties:
                funds:
                  type: integer
                  format: int64
                  example: 1000
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Wallet not found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []
    delete:
      tags:
        - wallet
      summary: Deletes the wallet
      description: delete the wallet
      operationId: deleteWallet
      parameters:
        - name: wallet_id
          in: path
          description: Wallet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': 
          description: Successful operation
        '400':
          description: Invalid Wallet value
      security:
        - bearerAuth: []
  /wallet/make-tranfer:
    post:
      tags:
      - transfer
      summary: Make transfer to another wallet
      description: Send funds from one wallet of the authorized user to another wallet of any user
      operationId: sendFunds
      requestBody:
        description: Transaction details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferOperation'
        required: true
      responses:
        '200':
          description: Transaction data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferInfo'
        '405':
          description: Invalid input
      security:
        - bearerAuth: []
  /wallet/{wallet_id}/transfers:
    get:
      tags:
      - transfer
      description: Get taransactions associated with a wallet of the authorized user
      summary: Info about transactions
      operationId: getWalletTransactions
      parameters:
      - name: wallet_id
        in: path
        description: 'Id of the wallet'
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful operation 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Wallet not found
      security:
        - bearerAuth: []
components:
  schemas:
    UserInfo:
      type: object
      required:
      - id
      - email
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: ivan@email.com
        firstName:
          type: string
          example: Ivan
        lastName:
          type: string
          example: James
    UserCreate:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    Wallet:
      type: object
      properties:
        wallet_id:
          type: integer
          format: int64
          example: 1
        funds:
          type: integer
          format: int64
          example: 1000
        user_id:
          type: integer
          format: int64
          example: 3
    TransferInfo:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          example: 1
        from_wallet:
          type: integer
          example: 2
        to_wallet:
          type: integer
          example: 5
        amount:
          type: integer
          example: 2000
        datetime:
          type: string
          format: date-time
    TransferOperation:
      required:
      - from_wallet
      - to_wallet
      - amount
      type: object
      properties:
        from_wallet:
          type: integer
          example: 2
        to_wallet:
          type: integer
          example: 5
        amount:
          type: integer
          example: 2000
    
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT